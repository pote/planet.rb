#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')

require 'gli'
require 'planet'
require 'fileutils'
require 'box'

include GLI::App

program_desc 'Planet.rb is an awesome feed-aggregator gem that consumes RSS/Atom feeds and outputs them in a format suitable to use with Octopress or Jekyll'

flag [:c,:config], :default_value => 'planet.yml', :desc => "Planet configuration file"

desc 'Parses planet.yml file for blogs and generates their posts in Jekyll compliant format under the _posts directory'
command :generate do |c|

  c.flag [:e,:extension], :desc => "Set post extension (markdown or html) ", :default_value => 'markdown', :long_desc => %Q{
Set the post's extension to the flag value.
The default is markdown, but many feeds deliver content
in html, and sometimes it is better to use that directly,
due to spacing issues possible with markdown.
}
  c.action do |global_options,options,args|

    Planet::Importer.import(global_options[:config]) do |planet|

      post_extension = options[:extension] || 'markdown'
      post_extension = '.' + post_extension unless post_extension[0] == '.'

      posts_dir = planet.config.fetch('posts_directory', 'source/_posts/')
      FileUtils.mkdir_p(posts_dir)
      puts "=> Writing #{ planet.posts.size } posts to the #{ posts_dir } directory."

      planet.posts.each do |post|
        file_name = posts_dir + post.file_name
        File.open(file_name + post_extension, "w+") { |f| f.write(post.to_s) }
      end

    end

  end
end

desc 'Creates basic planet.yml config file'
command :init do |c|
  c.action do |global_options,options,args|
    abort 'There is already a planet.yml file present' if File.exist?(global_options[:config])
    File.open(global_options[:config], 'w') { |f| f.write(Box::FILES['planet']) }
    puts "=> Created default #{global_options[:config]}"
  end
end

desc "Creates basic templates on the templates_directory specified in configuration file"
command :create_templates do |c|
  c.action do |global_options,options,args|
    STDERR.puts "DEBUG: #{caller.first} global_options[:config]=#{global_options[:config].inspect}"
    conf = YAML.load_file(global_options[:config])

    templates_dir = conf.fetch('planet').fetch('templates_directory', 'source/_layouts/')

    FileUtils.mkdir_p(templates_dir)

    if !File.exists?(templates_dir + 'author.html')
      File.open(templates_dir + 'author.html', 'w') { |f| f.write(Box::FILES['author']) }
      puts "=> Created default #{ templates_dir }author.html"
    else
      puts "=> Template #{ templates_dir }author.html already exists, skipping"
    end

    if !File.exists?(templates_dir + 'header.md')
      File.open(templates_dir + 'header.md', 'w') { |f| f.write(Box::FILES['header']) }
      puts "=> Created default #{ templates_dir }header.md"
    else
      puts "=> Template #{ templates_dir }header.md already exists, skipping"
    end
  end
end

desc 'Outputs planet.rb gem version'
command :version do |c|
  c.action do |global_options,options,args|
    puts "planet.rb version: #{ Planet::VERSION }"
  end
end

desc 'Delete existing templates and recreate them'
command :update_templates do |c|
  c.action do |global_options,options,args|
    conf = YAML.load_file(global_options[:config])

    templates_dir = conf.fetch('planet').fetch('templates_directory', 'source/_layouts/')

    author = templates_dir + 'author.html'
    header = templates_dir + 'header.md'

    File.delete(author) if File.exists?(author)
    File.delete(header) if File.exists?(header)

    response = `#{$0} -c #{global_options[:config]} create_templates`
    puts response
  end
end

pre do |global,command,options,args|
  if command.name == :generate
    conf = YAML.load_file(global[:config])

    templates_dir = conf.fetch('planet').fetch('templates_directory', 'source/_layouts')
    FileUtils.mkdir_p(templates_dir)

    files = { author: templates_dir + 'author.html', header: templates_dir + 'header.md' }

    files.each do |name, path|
      if !File.exists?(path)
        puts "=> You are missing some files in your templates directory, planet.rb will create them for you - make sure to review them on #{ templates_dir }!"

        response = `#{$0} -c #{global[:config]} create_templates`

        puts response
      elsif Box::FILES[name] != File.read(path)
        puts "!! WARNING: your planet.rb template files are different from the default, if you haven't made specific changes to them yourself then planet.rb default templates might have changed.Run 'planet update_templates' to override your current files with the newest default file available."
      end
    end
  end

  true
end

post do |global,command,options,args|
  true
end

on_error do |exception|
  STDERR.puts "Error: #{exception} (#{exception.class})"
  STDERR.puts exception.backtrace.join("\n")
  true
end

exit run(ARGV)

__END__
@@ author

{::options parse_block_html="true" /}
<div class="author">
   <img src="{{ image_url }}" style="width: 96px; height: 96;">
   <span style="position: absolute; padding: 32px 15px;">{% comment %}Remark that post_url refers to the *original* post url, not Jekyll's post_url variable. Moreover, planet.rb preprocesses the substitutions with Mustache.{% endcomment %}
      <i>{% if "{{ post_url }}" != "" %}<a href="{{ post_url }}">Original post</a>{% else %}Original post{% endif %} by {% if "{{ twitter_url }}" != "" %}<a href="{{ twitter_url }}">{{ author }}</a>{% else %}{{ author }}{% endif %} &mdash; check out <a href="{{ blog_url }}">{{ blog_name }}</a>.</i>
  </span>
</div>

@@  header
---
title: "{{ post_title }}"
kind: article
created_at: {{ post_date }}
author: "{{ author }}"
categories: {{ blog_categories }}
tags: {{ blog_tags }}
orig_url: {{ post_url }}
layout: post
---

@@  planet
## Planet.rb default config file, modify it and spawn awesomeness!

planet:
    posts_directory: source/_posts/
    templates_directory: source/_layouts/
    whitelisted_tags: []

blogs:
  # Bare minimum to get it working
  - author: "Sample: RSS Specifications"
    feed:   "http://www.rss-specifications.com/blog-feed.xml"
    image:  "http://www.rss-specifications.com/rss-spec-rss.gif"

  - author: "Anonimus Author"
    feed:   "http://www.feedforall.com/sample.xml"
    image:  "http://www.feedforall.com/ffalogo48x48.gif"
    # Other fields:
    twitter: "poteland"
    categories: "programming"
    tags: "test rss feed"
    url: "http://www.feedforall.com/sample-feeds.htm"    # => only required for people that don\'t have a \'url\' field on their RSS/Atom field'
